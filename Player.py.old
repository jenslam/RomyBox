from mpd import MPDClient
import re
import libs.utils
import sys
import time
from logger import Logger

class Player:
	def __init__(self):
		self.status = 1
		while self.status == 1:
			self.client = self.connectMPD()
			self.status = 0

	def connectMPD(self):
		connected = False
		wait_time = 5
		nclient = MPDClient()               # create client object
		nclient.timeout = 200               # network timeout in seconds (floats allowed), default: None
		nclient.idletimeout = None
		while connected == False:
			try:
				Logger.logr.info("Connecting...")
				nclient.connect("localhost", 6600)
				Logger.logr.info("Connected!")
				connected = True
				return nclient
			except:
				connected = False
       				Logger.logr.error("Couldn't connect. Retrying in %s secons",wait_time)
				time.sleep(wait_time)

	def play(self, plist):
		try:
			self.client.stop()
			self.client.clear()
			self.client.load(plist)
			self.client.play()
		except:
			Logger.logr.error('Could not play playlist %s ', plist)

	def handleExcept(self,function):
		Logger.logr.error("Fehler beim %s probieren es nochmal", function)
		self.connectMPD()


	def pause(self):
		try:
			if self.client.status()["state"] == "stop":
				self.client.play()
			else:
				self.client.pause()
		except:
			self.handleExcept("pausieren")
			self.pause()

	def next(self):
		try:
			self.client.next()
		except:
			self.handleExcept("weiter schalten")
			self.next()


	def prev(self):
		try:
			self.client.previous()
		except:
			self.handleExcept("zurueck schalten")
			self.prev()


	def stop(self):
		try:
			self.client.stop()
		except:
			self.handleExcept("stoppen")
			self.stop()


	def currentsongf(self):
		song = self.client.currentsong()
		return utils.format(song)

	def currentsong(self):
		try:
			print "song: "
			song =  self.client.currentsong()
			print(song['artist'] + " - " + song['title'])
		except:
			print("Unexpected error:", sys.exc_info()[0])

	def status(self,key):
		status = self.client.status()
		return status[key]
